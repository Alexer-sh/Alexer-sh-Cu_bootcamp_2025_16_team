import logging
import json
import os
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7396576561:AAHb42DqAk6t4Zkjbyw2Q3kA9bIDac6d3xU'
ADMIN_PASSWORD = 'admin123'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

USERS_FILE = 'users.json'
EVENTS_FILE = 'events.json'
PENDING_EVENTS_FILE = 'photo.json'
MENU_IMAGE_PATH = 'photo.jpg'
AI_TOKEN = 4096
AI_MODEL = "gpt-4o"
AI_URL = "https://us-central1-chatgpt-c1cfb.cloudfunctions.net/callTurbo"
AI_HEADERS = {
    "Host": "us-central1-chatgpt-c1cfb.cloudfunctions.net",
    "accept": "/",
    "content-type": "application/json",
    "user-agent": "AI Chatbot/3.6 (com.highteqsolutions.chatgpt; build:8; iOS 16.7.2) Alamofire/5.9.1",
    "accept-language": "ru-US;q=1.0"
}


async def get_ai_response(user_message, ai_context=""):
    current_message = f"\nUser: {user_message}"

    data = {
        'max_tokens': AI_TOKEN,
        'responseType': 'normal',
        'osType': 'iOS',
        'model': AI_MODEL,
        'value': f"–ü–†–û–®–õ–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: {ai_context}{current_message}",
        'search': user_message
    }

    try:
        response = await asyncio.to_thread(
            lambda: requests.post(AI_URL, headers=AI_HEADERS, data=json.dumps(data))
        )

        if response.status_code == 200:
            response_data = response.json()

            content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')

            if content:
                return content, ai_context + current_message + f"\nAI: {content}"
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.", ai_context
        else:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: —Å—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status_code}", ai_context
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: {e}", ai_context


def ensure_files_exist():
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)

    if not os.path.exists(EVENTS_FILE):
        with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f)

    if not os.path.exists(PENDING_EVENTS_FILE):
        with open(PENDING_EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f)


def load_users():
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_user(user_id, user_data):
    users = load_users()
    users[user_id] = user_data
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def load_events():
    with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_event(event_data):
    events = load_events()
    events.append(event_data)
    with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)


def load_pending_events():
    with open(PENDING_EVENTS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_pending_event(event_data):
    events = load_pending_events()
    events.append(event_data)
    with open(PENDING_EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)


def remove_pending_event(event_idx):
    events = load_pending_events()
    if 0 <= event_idx < len(events):
        removed_event = events.pop(event_idx)
        with open(PENDING_EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)
        return removed_event
    return None


def is_admin(user_id):
    users = load_users()
    return user_id in users and users[user_id].get("is_admin", False)


def register_user_for_event(user_id, event_idx):
    users = load_users()
    if user_id not in users:
        return False

    if "registered_events" not in users[user_id]:
        users[user_id]["registered_events"] = []

    if event_idx not in users[user_id]["registered_events"]:
        users[user_id]["registered_events"].append(event_idx)
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return True
    return False


def get_events_list_text():
    events = load_events()
    if not events:
        return "üì¢ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."

    result = "üìã **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:**\n\n"
    for idx, event in enumerate(events):
        event_type = "üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ" if event.get("is_official", False) else "üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        category_name = event.get("category", "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        category_emoji = ""
        if category_name == "official":
            category_emoji = "üèõÔ∏è"
        elif category_name == "informal":
            category_emoji = "üéâ"
        elif category_name == "recommendations":
            category_emoji = "‚ú®"
        elif category_name == "networking":
            category_emoji = "üëã"

        result += f"**{idx + 1}. {event['name']}**\n"
        result += f"   {event_type}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_emoji} {category_name}\n"
        result += f"   üìù {event['description'][:50]}...\n"
        result += f"   üìÖ {event['time']}\n"
        result += f"   üìç {event['location']}\n\n"

    return result


def get_all_events_info():
    events = load_events()
    if not events:
        return "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."

    result = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
    for idx, event in enumerate(events):
        event_type = "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ" if event.get("is_official", False) else "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ"
        category = event.get("category", "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        result += f"{idx + 1}. {event['name']}\n"
        result += f"   –¢–∏–ø: {event_type}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        result += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        result += f"   –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event['time']}\n"
        result += f"   –ú–µ—Å—Ç–æ: {event['location']}\n\n"

    return result


class RegistrationStates(StatesGroup):
    name = State()
    faculty = State()


class EventRegistrationStates(StatesGroup):
    name = State()
    description = State()
    location = State()
    time = State()
    is_official = State()


class AIConsultationStates(StatesGroup):
    conversation = State()


class AdminPasswordState(StatesGroup):
    waiting_password = State()


def get_main_menu(user_id=None):
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_events")],
        [InlineKeyboardButton(text="üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_events")],
        [InlineKeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="register_event")]
    ]

    if user_id and is_admin(user_id):
        keyboard_buttons.append([InlineKeyboardButton(text="üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_event_categories():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="category_official")],
        [InlineKeyboardButton(text="üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ", callback_data="category_informal")],
        [InlineKeyboardButton(text="‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="category_recommendations")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard


def get_admin_panel():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏", callback_data="manage_events")],
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="approve_events")],
        [InlineKeyboardButton(text="üèõÔ∏è –°–æ–∑–¥–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_official_event")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    return keyboard


def get_pending_events_list(page=0):
    events = load_pending_events()

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(events))

    for i in range(start_idx, end_idx):
        event = events[i]
        event_emoji = "üèõÔ∏è" if event.get("is_official", False) else "üéâ"
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{event_emoji} {event['name']}", callback_data=f"pending_event_{i}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pending_page_{page - 1}"))
    if end_idx < len(events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"pending_page_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_recommendations_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å—Å—è —Å –ò–ò", callback_data="consult_ai")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]
    ])
    return keyboard


def get_end_consultation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_consultation")]
    ])
    return keyboard


def get_pending_event_actions(event_idx):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_event_{event_idx}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_event_{event_idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="approve_events")]
    ])
    return keyboard


def get_events_list(category, page=0):
    events = load_events()
    if category != "all":
        events = [e for e in events if e.get("category") == category]

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(events))

    for i in range(start_idx, end_idx):
        event = events[i]
        event_emoji = "üèõÔ∏è" if event.get("is_official", False) else "üéâ"
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{event_emoji} {event['name']}", callback_data=f"event_{i}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{category}_{page - 1}"))
    if end_idx < len(events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{category}_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_my_events_list(user_id, page=0):
    users = load_users()
    events = load_events()

    registered_events = []
    if user_id in users and "registered_events" in users[user_id]:
        for event_idx in users[user_id]["registered_events"]:
            if event_idx < len(events):
                registered_events.append((event_idx, events[event_idx]))

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(registered_events))

    for i in range(start_idx, end_idx):
        event_idx, event = registered_events[i]
        event_emoji = "üèõÔ∏è" if event.get("is_official", False) else "üéâ"
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{event_emoji} {event['name']}", callback_data=f"my_event_{event_idx}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_page_{page - 1}"))
    if end_idx < len(registered_events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"my_page_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    await message.answer("üëë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminPasswordState.waiting_password)


@dp.message(AdminPasswordState.waiting_password)
async def process_admin_password(message: types.Message, state: FSMContext):
    password = message.text.strip()

    if password == ADMIN_PASSWORD:
        user_id = str(message.from_user.id)
        users = load_users()

        if user_id in users:
            users[user_id]["is_admin"] = True
            with open(USERS_FILE, 'w', encoding='utf-8') as f:
                json.dump(users, f, ensure_ascii=False, indent=2)

            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        else:
            await message.answer("‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    await state.clear()


from aiogram.fsm.context import FSMContext
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id in users:
        await message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {users[user_id]['name']}!",
            reply_markup=get_main_menu(user_id)
        )
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        await state.set_state(RegistrationStates.name)


@dp.message(RegistrationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer("üè´ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
    await state.set_state(RegistrationStates.faculty)


@dp.message(RegistrationStates.faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    faculty = message.text.strip()
    user_data = await state.get_data()
    user_data["faculty"] = faculty
    user_data["registered_events"] = []
    user_data["is_admin"] = False
    user_id = str(message.from_user.id)

    save_user(user_id, user_data)

    await message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption=f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['name']}!",
        reply_markup=get_main_menu(user_id)
    )
    await state.clear()


@dp.callback_query(lambda c: c.data == "admin_panel")
async def process_admin_panel(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)

    if not is_admin(user_id):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user_id)
        )
        return

    await callback_query.message.edit_caption(
        caption="üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_panel(),
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "approve_events")
async def process_approve_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)

    if not is_admin(user_id):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user_id)
        )
        return

    pending_events = load_pending_events()

    if not pending_events:
        await callback_query.message.edit_caption(
            caption="üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
            reply_markup=get_admin_panel()
        )
        return

    await callback_query.message.edit_caption(
        caption="üìã –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_pending_events_list()
    )


@dp.callback_query(lambda c: c.data.startswith("pending_page_"))
async def process_pending_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    page = int(callback_query.data.split("_")[2])
    await callback_query.message.edit_reply_markup(
        reply_markup=get_pending_events_list(page)
    )


@dp.callback_query(lambda c: c.data.startswith("pending_event_"))
async def process_pending_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    if not is_admin(user_id):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user_id)
        )
        return

    pending_events = load_pending_events()

    if event_idx >= len(pending_events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_pending_events_list()
        )
        return

    event = pending_events[event_idx]

    event_type = "üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ" if event.get("is_official", False) else "üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ"

    caption = (
        f"üìå **{event['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {event['time']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
        f"üè∑Ô∏è **–¢–∏–ø:** {event_type}\n\n"
        f"üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {event.get('creator_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    )

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=get_pending_event_actions(event_idx),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=get_pending_event_actions(event_idx),
            parse_mode="Markdown"
        )


@dp.callback_query(lambda c: c.data.startswith("approve_event_"))
async def approve_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    if not is_admin(user_id):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user_id)
        )
        return

    event = remove_pending_event(event_idx)

    if event:
        save_event(event)

        await callback_query.message.edit_caption(
            caption=f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\" –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫!",
            reply_markup=get_admin_panel()
        )
    else:
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_admin_panel()
        )


@dp.callback_query(lambda c: c.data.startswith("reject_event_"))
async def reject_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    if not is_admin(user_id):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user_id)
        )
        return

    event = remove_pending_event(event_idx)

    if event:
        await callback_query.message.edit_caption(
            caption=f"‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!",
            reply_markup=get_admin_panel()
        )
    else:
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_admin_panel()
        )


@dp.callback_query(lambda c: c.data == "create_official_event")
async def create_official_event(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)

    if not is_admin(user_id):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu(user_id)
        )
        return

    await state.update_data(is_official=True, is_admin_created=True)

    await callback_query.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
    )
    await state.set_state(EventRegistrationStates.name)


@dp.callback_query(lambda c: c.data == "view_events")
async def process_view_events(callback_query: types.CallbackQuery):
    await callback_query.answer()

    try:
        await callback_query.message.edit_caption(
            caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_event_categories()
        )
    except Exception as e:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
            reply_markup=get_event_categories()
        )


@dp.callback_query(lambda c: c.data == "my_events")
async def process_my_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)
    users = load_users()

    if user_id not in users:
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ",
            reply_markup=get_main_menu(user_id)
        )
        return

    if "registered_events" not in users[user_id] or not users[user_id]["registered_events"]:
        await callback_query.message.edit_caption(
            caption="üì≠ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            reply_markup=get_main_menu(user_id)
        )
        return

    await callback_query.message.edit_caption(
        caption="üìÖ –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_my_events_list(user_id)
    )


@dp.callback_query(lambda c: c.data.startswith("category_"))
async def process_category(callback_query: types.CallbackQuery):
    await callback_query.answer()
    category = callback_query.data.split("_")[1]

    if category == "recommendations":
        events_text = get_events_list_text()
        await callback_query.message.edit_caption(
            caption=f"‚ú® **–†–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π**\n\n{events_text}\nü§ñ **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?**",
            reply_markup=get_recommendations_menu(),
            parse_mode="Markdown"
        )
        return

    events = load_events()
    filtered_events = [e for e in events if e.get("category") == category]

    category_emoji = "üé≠"
    if category == "official":
        category_emoji = "üèõÔ∏è"
    elif category == "informal":
        category_emoji = "üéâ"
    elif category == "networking":
        category_emoji = "üëã"

    if not filtered_events:
        await callback_query.message.edit_caption(
            caption=f"{category_emoji} –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            reply_markup=get_event_categories()
        )
    else:
        await callback_query.message.edit_caption(
            caption=f"{category_emoji} –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=get_events_list(category)
        )


@dp.callback_query(lambda c: c.data == "consult_ai")
async def process_consult_ai(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    events_info = get_all_events_info()

    await state.update_data(ai_context="")

    await callback_query.message.answer(
        text="ü§ñ **–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é...**\n\n–£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∏ —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
        parse_mode="Markdown",
        reply_markup=get_end_consultation_keyboard()
    )

    initial_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. "
        "–Ø –∑–Ω–∞—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ. "
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –∏–ª–∏ –∫–∞–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–∂–Ω—ã –¥–ª—è –≤–∞—Å (—Ç–µ–º–∞—Ç–∏–∫–∞, –≤—Ä–µ–º—è, —Ñ–æ—Ä–º–∞—Ç)?"
    )

    ai_prompt = (
        f"–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–æ—Ç–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "
        f"–∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:\n\n{events_info}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, "
        f"–≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏ —Ç.–¥. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. "
        f"–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '–ü–æ–º–æ–≥–∏ –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'"
    )

    ai_response, new_context = await get_ai_response(ai_prompt)

    await state.update_data(ai_context=new_context)

    await state.set_state(AIConsultationStates.conversation)

    await callback_query.message.answer(
        text=ai_response,
        reply_markup=get_end_consultation_keyboard()
    )


@dp.message(AIConsultationStates.conversation)
async def process_ai_conversation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ai_context = data.get("ai_context", "")

    await message.answer("ü§ñ –î—É–º–∞—é...")

    ai_response, new_context = await get_ai_response(message.text, ai_context)

    await state.update_data(ai_context=new_context)

    await message.answer(
        text=ai_response,
        reply_markup=get_end_consultation_keyboard()
    )


@dp.callback_query(lambda c: c.data == "end_consultation")
async def end_consultation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)

    await state.clear()

    await callback_query.message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption="‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu(user_id)
    )


@dp.callback_query(lambda c: c.data.startswith("page_"))
async def process_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    _, category, page = callback_query.data.split("_")
    page = int(page)
    await callback_query.message.edit_reply_markup(
        reply_markup=get_events_list(category, page)
    )


@dp.callback_query(lambda c: c.data.startswith("my_page_"))
async def process_my_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    page = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_reply_markup(
        reply_markup=get_my_events_list(user_id, page)
    )


@dp.callback_query(lambda c: c.data.startswith("event_") and c.data.split("_")[1].isdigit())
async def process_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[1])
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_event_categories()
        )
        return

    event = events[event_idx]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_for_event_{event_idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_events")]
    ])

    event_type = "üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ" if event.get("is_official", False) else "üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ"

    caption = (
        f"üìå **{event['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {event['time']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
        f"üè∑Ô∏è **–¢–∏–ø:** {event_type}"
    )

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@dp.callback_query(lambda c: c.data.startswith("my_event_"))
async def process_my_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return

    event = events[event_idx]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data="my_events")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    event_type = "üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ" if event.get("is_official", False) else "üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ"

    caption = (
        f"üìå **{event['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {event['time']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
        f"üè∑Ô∏è **–¢–∏–ø:** {event_type}"
    )

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@dp.callback_query(lambda c: c.data == "register_event")
async def process_register_event(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
    )
    await state.set_state(EventRegistrationStates.name)


@dp.message(EventRegistrationStates.name)
async def process_event_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.description)


@dp.message(EventRegistrationStates.description)
async def process_event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.location)


@dp.message(EventRegistrationStates.location)
async def process_event_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.time)


@dp.message(EventRegistrationStates.time)
async def process_event_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    user_id = str(message.from_user.id)

    user_data = await state.get_data()
    is_admin_created = user_data.get("is_admin_created", False)

    if is_admin_created:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ", callback_data="set_category_official")],
            [InlineKeyboardButton(text="‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", callback_data="set_category_recommendations")],
            [InlineKeyboardButton(text="üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="set_category_networking")]
        ])

        await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
        await state.set_state(EventRegistrationStates.is_official)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ", callback_data="event_type_official")],
            [InlineKeyboardButton(text="üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ", callback_data="event_type_informal")]
        ])

        await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
        await state.set_state(EventRegistrationStates.is_official)


@dp.callback_query(lambda c: c.data.startswith("event_type_"))
async def process_event_type(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    event_type = callback_query.data.split("_")[2]
    is_official = event_type == "official"
    user_id = str(callback_query.from_user.id)

    if is_official and not is_admin(user_id):
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=None
        )

    event_data = await state.get_data()
    event_data["is_official"] = is_official

    users = load_users()
    if user_id in users:
        event_data["creator_id"] = user_id
        event_data["creator_name"] = users[user_id]["name"]

    await state.update_data(is_official=is_official)

    if is_official:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üèõÔ∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ", callback_data="set_category_official")],
            [InlineKeyboardButton(text="‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", callback_data="set_category_recommendations")],
            [InlineKeyboardButton(text="üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="set_category_networking")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéâ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ", callback_data="set_category_informal")],
            [InlineKeyboardButton(text="‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", callback_data="set_category_recommendations")],
            [InlineKeyboardButton(text="üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="set_category_networking")]
        ])

    await callback_query.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("set_category_"))
async def set_event_category(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)

    current_state = await state.get_state()
    if current_state == EventRegistrationStates.is_official:
        category = callback_query.data.split("_")[2]
        user_data = await state.get_data()
        user_data["category"] = category

        is_official = user_data.get("is_official", False)
        is_admin_created = user_data.get("is_admin_created", False)

        if is_official and not is_admin(user_id) and not is_admin_created:
            save_pending_event(user_data)

            await callback_query.message.answer_photo(
                photo=FSInputFile(MENU_IMAGE_PATH),
                caption="üì§ –í–∞—à–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
                reply_markup=get_main_menu(user_id)
            )
        else:
            save_event(user_data)

            await callback_query.message.answer_photo(
                photo=FSInputFile(MENU_IMAGE_PATH),
                caption="‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!",
                reply_markup=get_main_menu(user_id)
            )

        await state.clear()
    else:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption="‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=get_main_menu(user_id)
        )


@dp.callback_query(lambda c: c.data.startswith("register_for_event_"))
async def register_for_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[3])
    user_id = str(callback_query.from_user.id)
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_main_menu(user_id)
        )
        return

    event = events[event_idx]

    success = register_user_for_event(user_id, event_idx)

    if success:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\"!",
            reply_markup=get_main_menu(user_id)
        )
    else:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            reply_markup=get_main_menu(user_id)
        )


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_caption(
        caption="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu(user_id)
    )


@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data == "back_to_events")
async def back_to_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


async def main():
    ensure_files_exist()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())