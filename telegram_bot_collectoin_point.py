import logging
import json
import os
import asyncio
import re
import datetime
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

USERS_FILE = 'users.json'
EVENTS_FILE = 'events.json'
PENDING_EVENTS_FILE = 'photo.json'
MENU_IMAGE_PATH = 'photo.jpg'
AI_TOKEN = 4096
AI_MODEL = "gpt-4o"
AI_URL = "https://us-central1-chatgpt-c1cfb.cloudfunctions.net/callTurbo"
AI_HEADERS = {
    "Host": "us-central1-chatgpt-c1cfb.cloudfunctions.net",
    "accept": "/",
    "content-type": "application/json",
    "user-agent": "AI Chatbot/3.6 (com.highteqsolutions.chatgpt; build:8; iOS 16.7.2) Alamofire/5.9.1",
    "accept-language": "ru-US;q=1.0"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
EVENT_TYPES = {
    "party": {"name": "–¢—É—Å–æ–≤–∫–∏", "emoji": "üéâ"},
    "outdoor": {"name": "–í—ã–µ–∑–¥—ã –∑–∞–≥–æ—Ä–æ–¥", "emoji": "üå≥"},
    "excursion": {"name": "–≠–∫—Å–∫—É—Ä—Å–∏–∏", "emoji": "üèõÔ∏è"},
    "exhibition": {"name": "–í—ã—Å—Ç–∞–≤–∫–∏/–º—É–∑–µ–∏", "emoji": "üñºÔ∏è"},
    "networking": {"name": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "emoji": "üëã"},
    "boardgames": {"name": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "emoji": "üé≤"},
    "other": {"name": "–î—Ä—É–≥–æ–µ", "emoji": "üîç"}
}


async def get_ai_response(user_message, ai_context="", max_retries=3, timeout=30):
    current_message = f"\nUser: {user_message}"

    data = {
        'max_tokens': AI_TOKEN,
        'responseType': 'normal',
        'osType': 'iOS',
        'model': AI_MODEL,
        'value': f"–ü–†–û–®–õ–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: {ai_context}{current_message}",
        'search': user_message
    }

    for attempt in range(max_retries):
        try:
            response = await asyncio.to_thread(
                lambda: requests.post(AI_URL, headers=AI_HEADERS,
                                      data=json.dumps(data), timeout=timeout)
            )

            if response.status_code == 200:
                response_data = response.json()
                content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')

                if content:
                    return content, ai_context + current_message + f"\nAI: {content}"
                else:
                    logging.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ AI API: {response.status_code}")

            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < max_retries - 1:
                await asyncio.sleep(1)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(1)

    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.", ai_context


def load_data(filename):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        default_data = [] if filename in [EVENTS_FILE, PENDING_EVENTS_FILE] else {}
        save_data(filename, default_data)
        return default_data
    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filename}")
        return [] if filename in [EVENTS_FILE, PENDING_EVENTS_FILE] else {}


def save_data(filename, data):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª."""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_alpha(text: str) -> bool:
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞) –∏ –ø—Ä–æ–±–µ–ª—ã
    return bool(re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+", text))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å t.me)
def is_valid_telegram_link(link):
    return link.startswith("https://t.me/") or link.startswith("t.me/")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
def is_valid_date(date_text):
    try:
        datetime.datetime.strptime(date_text, "%d.%m.%Y")
        return True
    except ValueError:
        return False


def ensure_files_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞—ë—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    files_templates = {
        USERS_FILE: {},
        EVENTS_FILE: [],
        PENDING_EVENTS_FILE: []
    }

    for file, template in files_templates.items():
        if not os.path.exists(file):
            save_data(file, template)


def load_users():
    return load_data(USERS_FILE)


def save_user(user_id, user_data):
    users = load_users()
    users[user_id] = user_data
    save_data(USERS_FILE, users)


def load_events():
    return load_data(EVENTS_FILE)


def save_event(event_data):
    events = load_events()
    events.append(event_data)
    save_data(EVENTS_FILE, events)


def load_pending_events():
    return load_data(PENDING_EVENTS_FILE)


def save_pending_event(event_data):
    events = load_pending_events()
    events.append(event_data)
    save_data(PENDING_EVENTS_FILE, events)


def remove_pending_event(event_idx):
    events = load_pending_events()
    if 0 <= event_idx < len(events):
        removed_event = events.pop(event_idx)
        save_data(PENDING_EVENTS_FILE, events)
        return removed_event
    return None


def register_user_for_event(user_id, event_idx):
    users = load_users()
    if user_id not in users:
        return False

    if "registered_events" not in users[user_id]:
        users[user_id]["registered_events"] = []

    if event_idx not in users[user_id]["registered_events"]:
        users[user_id]["registered_events"].append(event_idx)
        save_data(USERS_FILE, users)
        return True
    return False


def format_event_caption(event, show_creator=True, include_links=True):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    category = event.get("category", "unknown")
    category_emoji = EVENT_TYPES.get(category, {}).get("emoji", "üîç")
    category_name = EVENT_TYPES.get(category, {}).get("name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    links_info = ""
    if include_links:
        tg_link = event.get("tg_link", "")
        tg_chat_link = event.get("tg_chat_link", "")
        if tg_link:
            links_info += f"\nüîó **–ö–∞–Ω–∞–ª:** {tg_link}"
        if tg_chat_link:
            links_info += f"\nüí¨ **–ß–∞—Ç:** {tg_chat_link}"

    creator_info = ""
    if show_creator and "creator_name" in event:
        creator_info = f"\nüë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {event['creator_name']}"

    caption = (
        f"üìå **{event['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {event['time']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
        f"üè∑Ô∏è **–¢–∏–ø:** {category_emoji} {category_name}{links_info}{creator_info}"
    )
    return caption


def get_main_menu(user_id=None):
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_events")],
        [InlineKeyboardButton(text="üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_events")],
        [InlineKeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="register_event")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_event_categories():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ EVENT_TYPES
    for key, value in EVENT_TYPES.items():
        keyboard.append([
            InlineKeyboardButton(
                text=f"{value['emoji']} {value['name']}",
                callback_data=f"category_{key}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="üîç –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="category_all")
    ])
    keyboard.append([
        InlineKeyboardButton(text="ü§ñ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="consult_ai")
    ])
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_recommendations_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å—Å—è —Å –ò–ò", callback_data="consult_ai")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]
    ])
    return keyboard


def get_end_consultation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_consultation")]
    ])
    return keyboard


def get_events_list(category, page=0):
    events = load_events()
    if category != "all":
        events = [e for e in events if e.get("category") == category]

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(events))

    for i in range(start_idx, end_idx):
        event = events[i]
        category = event.get("category", "unknown")
        category_emoji = EVENT_TYPES.get(category, {}).get("emoji", "üîç")

        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{category_emoji} {event['name']}", callback_data=f"event_{i}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{category}_{page - 1}"))
    if end_idx < len(events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{category}_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_my_events_list(user_id, page=0):
    users = load_users()
    events = load_events()

    # –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    registered_events = []
    if user_id in users and "registered_events" in users[user_id]:
        for event_idx in users[user_id]["registered_events"]:
            if event_idx < len(events):
                event = events[event_idx]
                registered_events.append({
                    "index": event_idx,
                    "event": event,
                    "is_creator": event.get("creator_id") == user_id,
                    "is_registered": True
                })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
    created_events = []
    for event_idx, event in enumerate(events):
        if event.get("creator_id") == user_id and not any(r.get("index") == event_idx for r in registered_events):
            created_events.append({
                "index": event_idx,
                "event": event,
                "is_creator": True,
                "is_registered": False
            })

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    all_user_events = registered_events + created_events

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(all_user_events))

    for i in range(start_idx, end_idx):
        event_data = all_user_events[i]
        event = event_data["event"]
        event_idx = event_data["index"]
        category = event.get("category", "unknown")
        category_emoji = EVENT_TYPES.get(category, {}).get("emoji", "üîç")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        prefix = "üëë " if event_data["is_creator"] else ""

        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{prefix}{category_emoji} {event['name']}",
                                 callback_data=f"my_event_{event_idx}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_page_{page - 1}"))
    if end_idx < len(all_user_events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"my_page_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


class RegistrationStates(StatesGroup):
    name = State()
    faculty = State()


class EventRegistrationStates(StatesGroup):
    name = State()
    description = State()
    location = State()
    time = State()
    tg_link = State()
    tg_chat_link = State()
    category = State()


class AIConsultationStates(StatesGroup):
    conversation = State()

class EventEditStates(StatesGroup):
    event_idx = State()
    name = State()
    description = State()
    location = State()
    time = State()
    tg_link = State()
    tg_chat_link = State()
    category = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id in users:
        await message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {users[user_id]['name']}!",
            reply_markup=get_main_menu(user_id)
        )
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        await state.set_state(RegistrationStates.name)


@dp.message(RegistrationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not is_alpha(name):
        await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return
    await state.update_data(name=name)
    await message.answer("üè´ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):")
    await state.set_state(RegistrationStates.faculty)

@dp.message(RegistrationStates.faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    faculty = message.text.strip()
    if not is_alpha(faculty):
        await message.answer("‚ö†Ô∏è –§–∞–∫—É–ª—å—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç.")
        return
    data = await state.get_data()
    data.update({
        "faculty": faculty,
        "registered_events": [],
        "is_admin": False,
        "active_event_creations": 0
    })
    uid = str(message.from_user.id)
    save_user(uid, data)
    await message.answer_photo(photo=FSInputFile(MENU_IMAGE_PATH),
                               caption=f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data['name']}!",
                               reply_markup=get_main_menu(uid))
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("pending_page_"))
async def process_pending_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    page = int(callback_query.data.split("_")[2])
    await callback_query.message.edit_reply_markup(
        reply_markup=get_pending_events_list(page)
    )


@dp.callback_query(lambda c: c.data.startswith("page_"))
async def process_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    _, category, page = callback_query.data.split("_")
    page = int(page)
    await callback_query.message.edit_reply_markup(
        reply_markup=get_events_list(category, page)
    )


@dp.callback_query(lambda c: c.data.startswith("my_page_"))
async def process_my_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    page = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_reply_markup(
        reply_markup=get_my_events_list(user_id, page)
    )


@dp.callback_query(lambda c: c.data.startswith("event_") and c.data.split("_")[1].isdigit())
async def process_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[1])
    user_id = str(callback_query.from_user.id)
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_event_categories()
        )
        return

    event = events[event_idx]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    is_creator = event.get("creator_id") == user_id

    keyboard_buttons = []
    if is_creator:
        keyboard_buttons.append([InlineKeyboardButton(text="üëë –í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="none")])
    else:
        keyboard_buttons.append(
            [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_for_event_{event_idx}")])

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_events")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    caption = format_event_caption(event, show_creator=True)

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("my_event_"))
async def process_my_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return

    event = events[event_idx]
    is_creator = event.get("creator_id") == user_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    users = load_users()
    is_registered = False
    if user_id in users and "registered_events" in users[user_id]:
        is_registered = event_idx in users[user_id]["registered_events"]

    # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    keyboard_buttons = []
    if is_creator:
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üëë –í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=f"creator_info_{event_idx}")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                                                      callback_data=f"edit_event_{event_idx}")])
        keyboard_buttons.append([InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                                                      callback_data=f"view_participants_{event_idx}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        keyboard_buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                                                      callback_data=f"delete_event_{event_idx}")])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif is_registered:
        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                                                      callback_data=f"cancel_registration_{event_idx}")])

    keyboard_buttons.append([InlineKeyboardButton(text="üìÖ –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data="my_events")])
    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    caption = format_event_caption(event, show_creator=True)

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
@dp.callback_query(lambda c: c.data.startswith("delete_event_"))
async def confirm_delete_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    events = load_events()
    if event_idx >= len(events):
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    event = events[event_idx]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if event.get("creator_id") != user_id:
        await callback_query.message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –µ–≥–æ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event_idx}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"my_event_{event_idx}")
        ]
    ])

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback_query.message.edit_caption(
        caption=f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def perform_delete_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    events = load_events()
    if event_idx >= len(events):
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    event = events[event_idx]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if event.get("creator_id") != user_id:
        await callback_query.message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –µ–≥–æ")
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    event_name = event.get("name", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    success = delete_event(event_idx)

    if success:
        await callback_query.message.edit_caption(
            caption=f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event_name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
            reply_markup=get_main_menu(user_id)
        )
    else:
        await callback_query.message.edit_caption(
            caption=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            reply_markup=get_main_menu(user_id)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
@dp.callback_query(lambda c: c.data.startswith("creator_info_"))
async def creator_info(callback_query: types.CallbackQuery):
    await callback_query.answer("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def delete_event(event_idx):
    events = load_events()
    users = load_users()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if event_idx >= len(events):
        return False

    # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    removed_event = events.pop(event_idx)

    # –£–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    for user_id, user_data in users.items():
        if "registered_events" in user_data:
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if event_idx in user_data["registered_events"]:
                user_data["registered_events"].remove(event_idx)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
            updated_registrations = []
            for reg_idx in user_data["registered_events"]:
                if reg_idx > event_idx:
                    updated_registrations.append(reg_idx - 1)
                else:
                    updated_registrations.append(reg_idx)

            user_data["registered_events"] = updated_registrations

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_data(EVENTS_FILE, events)
    save_data(USERS_FILE, users)

    return True


def cancel_user_registration_for_event(user_id, event_idx):
    users = load_users()
    if user_id not in users:
        return False

    if "registered_events" not in users[user_id]:
        return False

    if event_idx in users[user_id]["registered_events"]:
        users[user_id]["registered_events"].remove(event_idx)
        save_data(USERS_FILE, users)
        return True
    return False


@dp.callback_query(lambda c: c.data.startswith("cancel_registration_"))
async def cancel_event_registration(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    events = load_events()
    if event_idx >= len(events):
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    event = events[event_idx]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if event.get("creator_id") == user_id:
        await callback_query.message.answer("‚ö†Ô∏è –°–æ–∑–¥–∞—Ç–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return

    success = cancel_user_registration_for_event(user_id, event_idx)

    if success:
        caption = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\" –æ—Ç–º–µ–Ω–µ–Ω–∞"
    else:
        caption = f"‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"

    await callback_query.message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption=caption,
        reply_markup=get_main_menu(user_id)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="cancel_event_creation")]
    ])


@dp.callback_query(lambda c: c.data == "register_event")
async def process_register_event(callback_query: types.CallbackQuery, state: FSMContext):
    uid = str(callback_query.from_user.id)
    users = load_users()
    if uid in users:
        if users[uid].get('active_event_creations', 0) >= 1:
            await callback_query.answer("‚ö†Ô∏è –í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ 1 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ.")
            return
        users[uid]['active_event_creations'] = users[uid].get('active_event_creations', 0) + 1
        save_user(uid, users[uid])
    await callback_query.answer()
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(EventRegistrationStates.name)

@dp.message(EventRegistrationStates.name)
async def process_event_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.description)


@dp.message(EventRegistrationStates.description)
async def process_event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EventRegistrationStates.location)


@dp.message(EventRegistrationStates.location)
async def process_event_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text.strip())
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EventRegistrationStates.time)


@dp.message(EventRegistrationStates.time)
async def process_event_time(message: types.Message, state: FSMContext):
    date_str = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì
    if not is_valid_date(date_str):
        await message.answer("‚ö†Ô∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", reply_markup=get_cancel_keyboard())
        return
    await state.update_data(time=date_str)
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EventRegistrationStates.tg_link)
@dp.message(EventRegistrationStates.tg_link)
async def reg_tg_link(message: types.Message, state: FSMContext):
    link = message.text.strip()
    if link.lower() != '–Ω–µ—Ç' and not is_valid_telegram_link(link):
        await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å t.me/ –∏–ª–∏ https://t.me/. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    if link.lower() == '–Ω–µ—Ç':
        link = ""
    await state.update_data(tg_link=link)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram —á–∞—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç):", reply_markup=get_cancel_keyboard())
    await state.set_state(EventRegistrationStates.tg_chat_link)

@dp.message(EventRegistrationStates.tg_chat_link)
async def reg_tg_chat(message: types.Message, state: FSMContext):
    tg_chat_link = message.text.strip()
    if tg_chat_link.lower() != '–Ω–µ—Ç' and not is_valid_telegram_link(tg_chat_link):
        await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å t.me/ –∏–ª–∏ https://t.me/. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    if tg_chat_link.lower() == '–Ω–µ—Ç':
        tg_chat_link = ""
    await state.update_data(tg_chat_link=tg_chat_link)
    # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    event_type_keyboard = get_event_type_keyboard()
    keyboard_buttons = list(event_type_keyboard.inline_keyboard)
    keyboard_buttons.append(
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="cancel_event_creation")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(EventRegistrationStates.category)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.callback_query(lambda c: c.data == "cancel_event_creation")
async def cancel_event_creation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    uid = str(callback_query.from_user.id)
    users = load_users()
    if uid in users:
        if users[uid].get('active_event_creations', 0)==1:
            users[uid]['active_event_creations'] = users[uid].get('active_event_creations', 0) - 1
            save_user(uid, users[uid])
            await callback_query.answer()
            await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())
            await state.set_state(EventRegistrationStates.name)
            await callback_query.message.answer_photo(
                photo=FSInputFile(MENU_IMAGE_PATH),
                caption="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=get_main_menu(str(callback_query.from_user.id))
            )
def get_event_type_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    keyboard = []
    for key, value in EVENT_TYPES.items():
        keyboard.append([
            InlineKeyboardButton(text=f"{value['emoji']} {value['name']}",
                                 callback_data=f"event_type_{key}")
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.callback_query(lambda c: c.data.startswith("event_type_"))
async def process_event_type(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    event_type = callback_query.data.split("_")[2]
    user_id = str(callback_query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if event_type not in EVENT_TYPES:
        await callback_query.message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    event_data = await state.get_data()
    event_data["category"] = event_type
    event_data["category_name"] = EVENT_TYPES[event_type]["name"]

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Å—ã–ª–æ–∫
    for link_key in ["tg_link", "tg_chat_link"]:
        if link_key in event_data and event_data[link_key]:
            link = event_data[link_key]
            if not link.startswith(("https://t.me/", "https://telegram.me/")):
                event_data[link_key] = f"https://t.me/{link.lstrip('@')}"

    users = load_users()
    if user_id in users:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
        event_data["creator_id"] = user_id
        event_data["creator_name"] = users[user_id]["name"]
        event_data["created_at"] = datetime.datetime.now().isoformat()

    save_event(event_data)

    await callback_query.message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption="‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!",
        reply_markup=get_main_menu(user_id)
    )
    uid = str(callback_query.from_user.id)
    users = load_users()
    if uid in users:
        if users[uid].get('active_event_creations', 0) == 1:
            users[uid]['active_event_creations'] = users[uid].get('active_event_creations', 0) - 1
            save_user(uid, users[uid])
    await state.clear()


@dp.callback_query(lambda c: c.data.startswith("register_for_event_"))
async def register_for_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[3])
    user_id = str(callback_query.from_user.id)

    try:
        events = load_events()
        event = events[event_idx]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if event.get("creator_id") == user_id:
            await callback_query.message.answer_photo(
                photo=FSInputFile(MENU_IMAGE_PATH),
                caption=f"‚ÑπÔ∏è –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –Ω–µ–≥–æ.",
                reply_markup=get_main_menu(user_id)
            )
            return

        success = register_user_for_event(user_id, event_idx)

        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
            links_text = ""
            for link_type, prefix in [("tg_link", "üîó Telegram –∫–∞–Ω–∞–ª"),
                                      ("tg_chat_link", "üí¨ Telegram —á–∞—Ç")]:
                if link := event.get(link_type):
                    links_text += f"\n\n{prefix}: {link}"

            caption = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\"!{links_text}"
        else:
            caption = f"‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"

        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=get_main_menu(user_id)
        )
    except (IndexError, KeyError):
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_main_menu(user_id)
        )


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_caption(
        caption="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu(user_id)
    )


@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data == "back_to_events")
async def back_to_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data.startswith("category_"))
async def process_category_selection(callback_query: types.CallbackQuery):
    await callback_query.answer()
    category = callback_query.data.split("_")[1]

    category_names = {
        "party": "–¢—É—Å–æ–≤–∫–∏",
        "outdoor": "–í—ã–µ–∑–¥—ã –∑–∞–≥–æ—Ä–æ–¥",
        "excursion": "–≠–∫—Å–∫—É—Ä—Å–∏–∏",
        "exhibition": "–í—ã—Å—Ç–∞–≤–∫–∏/–º—É–∑–µ–∏",
        "networking": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
        "boardgames": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
        "other": "–î—Ä—É–≥–æ–µ"
    }

    category_emojis = {
        "party": "üéâ",
        "outdoor": "üå≥",
        "excursion": "üèõÔ∏è",
        "exhibition": "üñºÔ∏è",
        "networking": "üëã",
        "boardgames": "üé≤",
        "other": "üîç"
    }

    await callback_query.message.edit_caption(
        caption=f"{category_emojis.get(category, '')} –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_names.get(category, category)}¬ª",
        reply_markup=get_events_list(category, 0)
    )


@dp.callback_query(lambda c: c.data == "view_events")
async def view_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data == "my_events")
async def my_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_caption(
        caption="üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_my_events_list(user_id, 0)
    )


@dp.callback_query(lambda c: c.data.startswith("my_event_"))
async def view_my_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    events = load_events()
    if event_idx >= len(events):
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    event = events[event_idx]
    is_creator = event.get("creator_id") == user_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    caption = format_event_caption(event, show_creator=False)

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    buttons = []
    if is_creator:
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
                                             callback_data=f"edit_event_{event_idx}")])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º",
                                         callback_data="my_events")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_caption(caption=caption, reply_markup=keyboard)


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("edit_event_"))
async def start_edit_event(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    events = load_events()
    if event_idx >= len(events):
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    event = events[event_idx]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if event.get("creator_id") != user_id:
        await callback_query.message.answer("‚ö†Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(event_idx=event_idx, original_event=event)
    await state.set_state(EventEditStates.name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
    ])

    await callback_query.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=keyboard
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
def get_registered_users_for_event(event_idx):
    users = load_users()
    registered_users = []

    for user_id, user_data in users.items():
        if "registered_events" in user_data and event_idx in user_data["registered_events"]:
            registered_users.append({
                "id": user_id,
                "name": user_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                "faculty": user_data.get("faculty", "")
            })

    return registered_users


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.callback_query(lambda c: c.data.startswith("view_participants_"))
async def view_event_participants(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)

    events = load_events()
    if event_idx >= len(events):
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    event = events[event_idx]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if event.get("creator_id") != user_id:
        await callback_query.message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    registered_users = get_registered_users_for_event(event_idx)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    event_name = event.get("name", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    if registered_users:
        participants_text = "\n".join([f"{i + 1}. {user['name']} ({user['faculty']})"
                                       for i, user in enumerate(registered_users)])
        caption = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è \"{event_name}\" ({len(registered_users)}):\n\n{participants_text}"
    else:
        caption = f"üë• –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event_name}\" –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è"

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é", callback_data=f"my_event_{event_idx}")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    await callback_query.message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption=caption,
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data == "keep_current")
async def keep_current_value(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    current_state = await state.get_state()
    data = await state.get_data()
    original_event = data.get("original_event", {})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if current_state == EventEditStates.name.state:
        await state.update_data(name=original_event.get("name", ""))
        await state.set_state(EventEditStates.description)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
        ])

        await callback_query.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {original_event.get('description', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
            reply_markup=keyboard
        )

    elif current_state == EventEditStates.description.state:
        await state.update_data(description=original_event.get("description", ""))
        await state.set_state(EventEditStates.location)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
        ])

        await callback_query.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: {original_event.get('location', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
            reply_markup=keyboard
        )

    elif current_state == EventEditStates.location.state:
        await state.update_data(location=original_event.get("location", ""))
        await state.set_state(EventEditStates.time)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
        ])

        await callback_query.message.answer(
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {original_event.get('time', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
            reply_markup=keyboard
        )

    elif current_state == EventEditStates.time.state:
        await state.update_data(time=original_event.get("time", ""))
        await state.set_state(EventEditStates.tg_link)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
        ])

        await callback_query.message.answer(
            f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª: {original_event.get('tg_link', '–Ω–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
            reply_markup=keyboard
        )

    elif current_state == EventEditStates.tg_link.state:
        await state.update_data(tg_link=original_event.get("tg_link", ""))
        await state.set_state(EventEditStates.tg_chat_link)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
        ])

        await callback_query.message.answer(
            f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –±–µ—Å–µ–¥—É: {original_event.get('tg_chat_link', '–Ω–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
            reply_markup=keyboard
        )

    elif current_state == EventEditStates.tg_chat_link.state:
        await state.update_data(tg_chat_link=original_event.get("tg_chat_link", ""))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard = get_event_type_keyboard()
        current_category = original_event.get("category", "")
        category_name = EVENT_TYPES.get(current_category, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

        await callback_query.message.answer(
            f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                *keyboard.inline_keyboard,
                [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_category")]
            ])
        )

        await state.set_state(EventEditStates.category)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data == "keep_category")
async def keep_current_category(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    original_event = data.get("original_event", {})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=original_event.get("category", ""))

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await complete_edit(callback_query, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
@dp.message(EventEditStates.name)
async def process_edit_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    data = await state.get_data()
    original_event = data.get("original_event", {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
    ])

    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {original_event.get('description', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=keyboard
    )
    await state.set_state(EventEditStates.description)


@dp.message(EventEditStates.description)
async def process_edit_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    data = await state.get_data()
    original_event = data.get("original_event", {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
    ])

    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: {original_event.get('location', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=keyboard
    )
    await state.set_state(EventEditStates.location)


@dp.message(EventEditStates.location)
async def process_edit_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text.strip())
    data = await state.get_data()
    original_event = data.get("original_event", {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
    ])

    await message.answer(
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {original_event.get('time', '')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=keyboard
    )
    await state.set_state(EventEditStates.time)


@dp.message(EventEditStates.time)
async def process_edit_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    data = await state.get_data()
    original_event = data.get("original_event", {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
    ])

    await message.answer(
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª: {original_event.get('tg_link', '–Ω–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=keyboard
    )
    await state.set_state(EventEditStates.tg_link)


@dp.message(EventEditStates.tg_link)
async def process_edit_tg_link(message: types.Message, state: FSMContext):
    tg_link = message.text.strip()
    if tg_link.lower() == '–Ω–µ—Ç':
        tg_link = ""
    await state.update_data(tg_link=tg_link)

    data = await state.get_data()
    original_event = data.get("original_event", {})

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_current")]
    ])

    await message.answer(
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –±–µ—Å–µ–¥—É: {original_event.get('tg_chat_link', '–Ω–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=keyboard
    )
    await state.set_state(EventEditStates.tg_chat_link)


@dp.message(EventEditStates.tg_chat_link)
async def process_edit_tg_chat_link(message: types.Message, state: FSMContext):
    tg_chat_link = message.text.strip()
    if tg_chat_link.lower() == '–Ω–µ—Ç':
        tg_chat_link = ""
    await state.update_data(tg_chat_link=tg_chat_link)

    data = await state.get_data()
    original_event = data.get("original_event", {})

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = get_event_type_keyboard()
    current_category = original_event.get("category", "")
    category_name = EVENT_TYPES.get(current_category, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

    await message.answer(
        f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            *keyboard.inline_keyboard,
            [InlineKeyboardButton(text="üîÑ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", callback_data="keep_category")]
        ])
    )
    await state.set_state(EventEditStates.category)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@dp.callback_query(lambda c: c.data.startswith("event_type_") and EventEditStates.category)
async def process_edit_category(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    event_type = callback_query.data.split("_")[2]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if event_type not in EVENT_TYPES:
        await callback_query.message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(category=event_type)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await complete_edit(callback_query, state)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def complete_edit(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event_idx = data.get("event_idx")
    original_event = data.get("original_event", {})

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    events = load_events()

    if event_idx < len(events):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        for field in ["name", "description", "location", "time", "tg_link", "tg_chat_link", "category"]:
            if field in data:
                events[event_idx][field] = data[field]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        events[event_idx]["edited_at"] = datetime.datetime.now().isoformat()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data(EVENTS_FILE, events)

        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption="‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_main_menu(str(callback_query.from_user.id))
        )
    else:
        await callback_query.message.answer("‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


async def main():
    ensure_files_exist()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())