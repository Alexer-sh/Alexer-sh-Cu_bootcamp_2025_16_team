import logging
import json
import os
import asyncio
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command


logging.basicConfig(level=logging.INFO)
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

USERS_FILE = 'users.json'
EVENTS_FILE = 'events.json'
PENDING_EVENTS_FILE = 'photo.json'
MENU_IMAGE_PATH = 'photo.jpg'
AI_TOKEN = 4096
AI_MODEL = "gpt-4o"
AI_URL = "https://us-central1-chatgpt-c1cfb.cloudfunctions.net/callTurbo"
AI_HEADERS = {
    "Host": "us-central1-chatgpt-c1cfb.cloudfunctions.net",
    "accept": "/",
    "content-type": "application/json",
    "user-agent": "AI Chatbot/3.6 (com.highteqsolutions.chatgpt; build:8; iOS 16.7.2) Alamofire/5.9.1",
    "accept-language": "ru-US;q=1.0"
}


async def get_ai_response(user_message, ai_context=""):
    current_message = f"\nUser: {user_message}"

    data = {
        'max_tokens': AI_TOKEN,
        'responseType': 'normal',
        'osType': 'iOS',
        'model': AI_MODEL,
        'value': f"–ü–†–û–®–õ–´–ï –°–û–û–ë–©–ï–ù–ò–Ø: {ai_context}{current_message}",
        'search': user_message
    }

    try:
        response = await asyncio.to_thread(
            lambda: requests.post(AI_URL, headers=AI_HEADERS, data=json.dumps(data))
        )

        if response.status_code == 200:
            response_data = response.json()

            content = response_data.get('choices', [{}])[0].get('message', {}).get('content', '')

            if content:
                return content, ai_context + current_message + f"\nAI: {content}"
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.", ai_context
        else:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: —Å—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status_code}", ai_context
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: {e}", ai_context


def ensure_files_exist():
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)

    if not os.path.exists(EVENTS_FILE):
        with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f)

    if not os.path.exists(PENDING_EVENTS_FILE):
        with open(PENDING_EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump([], f)


def load_users():
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_user(user_id, user_data):
    users = load_users()
    users[user_id] = user_data
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def load_events():
    with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_event(event_data):
    events = load_events()
    events.append(event_data)
    with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)


def load_pending_events():
    with open(PENDING_EVENTS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def save_pending_event(event_data):
    events = load_pending_events()
    events.append(event_data)
    with open(PENDING_EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)


def remove_pending_event(event_idx):
    events = load_pending_events()
    if 0 <= event_idx < len(events):
        removed_event = events.pop(event_idx)
        with open(PENDING_EVENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)
        return removed_event
    return None


def register_user_for_event(user_id, event_idx):
    users = load_users()
    if user_id not in users:
        return False

    if "registered_events" not in users[user_id]:
        users[user_id]["registered_events"] = []

    if event_idx not in users[user_id]["registered_events"]:
        users[user_id]["registered_events"].append(event_idx)
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return True
    return False


def get_events_list_text():
    events = load_events()
    if not events:
        return "üì¢ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."

    result = "üìã **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:**\n\n"
    for idx, event in enumerate(events):
        category = event.get("category", "unknown")
        category_emoji = ""
        if category == "party":
            category_emoji = "üéâ"
        elif category == "outdoor":
            category_emoji = "üå≥"
        elif category == "excursion":
            category_emoji = "üèõÔ∏è"
        elif category == "exhibition":
            category_emoji = "üñºÔ∏è"
        elif category == "networking":
            category_emoji = "üëã"
        elif category == "boardgames":
            category_emoji = "üé≤"
        elif category == "other":
            category_emoji = "üîç"

        category_name = event.get("category_name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        result += f"**{idx + 1}. {event['name']}**\n"
        result += f"   {category_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        result += f"   üìù {event['description'][:50]}...\n"
        result += f"   üìÖ {event['time']}\n"
        result += f"   üìç {event['location']}\n\n"

    return result


def get_all_events_info():
    events = load_events()
    if not events:
        return "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."

    result = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
    for idx, event in enumerate(events):
        category = event.get("category", "unknown")
        category_emoji = ""
        if category == "party":
            category_emoji = "üéâ"
        elif category == "outdoor":
            category_emoji = "üå≥"
        elif category == "excursion":
            category_emoji = "üèõÔ∏è"
        elif category == "exhibition":
            category_emoji = "üñºÔ∏è"
        elif category == "networking":
            category_emoji = "üëã"
        elif category == "boardgames":
            category_emoji = "üé≤"
        elif category == "other":
            category_emoji = "üîç"

        category_name = event.get("category_name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        result += f"{idx + 1}. {event['name']}\n"
        result += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_emoji} {category_name}\n"
        result += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        result += f"   –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event['time']}\n"
        result += f"   –ú–µ—Å—Ç–æ: {event['location']}\n\n"

    return result


class RegistrationStates(StatesGroup):
    name = State()
    faculty = State()


class EventRegistrationStates(StatesGroup):
    name = State()
    description = State()
    location = State()
    time = State()
    tg_link = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª
    tg_chat_link = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –±–µ—Å–µ–¥—É
    category = State()


class AIConsultationStates(StatesGroup):
    conversation = State()


class AdminPasswordState(StatesGroup):
    waiting_password = State()


def get_main_menu(user_id=None):
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="view_events")],
        [InlineKeyboardButton(text="üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_events")],
        [InlineKeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="register_event")]
    ]

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_event_categories():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéâ –¢—É—Å–æ–≤–∫–∏", callback_data="category_party")],
        [InlineKeyboardButton(text="üå≥ –í—ã–µ–∑–¥—ã –∑–∞–≥–æ—Ä–æ–¥", callback_data="category_outdoor")],
        [InlineKeyboardButton(text="üèõÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏", callback_data="category_excursion")],
        [InlineKeyboardButton(text="üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∏/–º—É–∑–µ–∏", callback_data="category_exhibition")],
        [InlineKeyboardButton(text="üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="category_networking")],
        [InlineKeyboardButton(text="üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="category_boardgames")],
        [InlineKeyboardButton(text="üîç –î—Ä—É–≥–æ–µ", callback_data="category_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard


def get_pending_events_list(page=0):
    events = load_pending_events()

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(events))

    for i in range(start_idx, end_idx):
        event = events[i]
        category = event.get("category", "unknown")
        category_emoji = ""
        if category == "party":
            category_emoji = "üéâ"
        elif category == "outdoor":
            category_emoji = "üå≥"
        elif category == "excursion":
            category_emoji = "üèõÔ∏è"
        elif category == "exhibition":
            category_emoji = "üñºÔ∏è"
        elif category == "networking":
            category_emoji = "üëã"
        elif category == "boardgames":
            category_emoji = "üé≤"
        elif category == "other":
            category_emoji = "üîç"

        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{category_emoji} {event['name']}", callback_data=f"pending_event_{i}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pending_page_{page - 1}"))
    if end_idx < len(events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"pending_page_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_recommendations_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å—Å—è —Å –ò–ò", callback_data="consult_ai")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]
    ])
    return keyboard


def get_end_consultation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_consultation")]
    ])
    return keyboard


def get_pending_event_actions(event_idx):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_event_{event_idx}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_event_{event_idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="approve_events")]
    ])
    return keyboard


def get_events_list(category, page=0):
    events = load_events()
    if category != "all":
        events = [e for e in events if e.get("category") == category]

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(events))

    for i in range(start_idx, end_idx):
        event = events[i]
        category = event.get("category", "unknown")
        category_emoji = ""
        if category == "party":
            category_emoji = "üéâ"
        elif category == "outdoor":
            category_emoji = "üå≥"
        elif category == "excursion":
            category_emoji = "üèõÔ∏è"
        elif category == "exhibition":
            category_emoji = "üñºÔ∏è"
        elif category == "networking":
            category_emoji = "üëã"
        elif category == "boardgames":
            category_emoji = "üé≤"
        elif category == "other":
            category_emoji = "üîç"

        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{category_emoji} {event['name']}", callback_data=f"event_{i}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{category}_{page - 1}"))
    if end_idx < len(events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{category}_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


def get_my_events_list(user_id, page=0):
    users = load_users()
    events = load_events()

    registered_events = []
    if user_id in users and "registered_events" in users[user_id]:
        for event_idx in users[user_id]["registered_events"]:
            if event_idx < len(events):
                registered_events.append((event_idx, events[event_idx]))

    keyboard_buttons = []
    start_idx = page * 5
    end_idx = min(start_idx + 5, len(registered_events))

    for i in range(start_idx, end_idx):
        event_idx, event = registered_events[i]
        category = event.get("category", "unknown")
        category_emoji = ""
        if category == "party":
            category_emoji = "üéâ"
        elif category == "outdoor":
            category_emoji = "üå≥"
        elif category == "excursion":
            category_emoji = "üèõÔ∏è"
        elif category == "exhibition":
            category_emoji = "üñºÔ∏è"
        elif category == "networking":
            category_emoji = "üëã"
        elif category == "boardgames":
            category_emoji = "üé≤"
        elif category == "other":
            category_emoji = "üîç"

        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{category_emoji} {event['name']}", callback_data=f"my_event_{event_idx}")
        ])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_page_{page - 1}"))
    if end_idx < len(registered_events):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"my_page_{page + 1}"))

    if nav_buttons:
        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id in users:
        await message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {users[user_id]['name']}!",
            reply_markup=get_main_menu(user_id)
        )
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        await state.set_state(RegistrationStates.name)


@dp.message(RegistrationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer("üè´ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
    await state.set_state(RegistrationStates.faculty)


@dp.message(RegistrationStates.faculty)
async def process_faculty(message: types.Message, state: FSMContext):
    faculty = message.text.strip()
    user_data = await state.get_data()
    user_data["faculty"] = faculty
    user_data["registered_events"] = []
    user_data["is_admin"] = False
    user_id = str(message.from_user.id)

    save_user(user_id, user_data)

    await message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption=f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['name']}!",
        reply_markup=get_main_menu(user_id)
    )
    await state.clear()


@dp.callback_query(lambda c: c.data.startswith("pending_page_"))
async def process_pending_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    page = int(callback_query.data.split("_")[2])
    await callback_query.message.edit_reply_markup(
        reply_markup=get_pending_events_list(page)
    )


@dp.callback_query(lambda c: c.data.startswith("page_"))
async def process_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    _, category, page = callback_query.data.split("_")
    page = int(page)
    await callback_query.message.edit_reply_markup(
        reply_markup=get_events_list(category, page)
    )


@dp.callback_query(lambda c: c.data.startswith("my_page_"))
async def process_my_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    page = int(callback_query.data.split("_")[2])
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_reply_markup(
        reply_markup=get_my_events_list(user_id, page)
    )


@dp.callback_query(lambda c: c.data.startswith("event_") and c.data.split("_")[1].isdigit())
async def process_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[1])
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_event_categories()
        )
        return

    event = events[event_idx]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_for_event_{event_idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_events")]
    ])

    category = event.get("category", "unknown")
    category_emoji = ""
    if category == "party":
        category_emoji = "üéâ"
    elif category == "outdoor":
        category_emoji = "üå≥"
    elif category == "excursion":
        category_emoji = "üèõÔ∏è"
    elif category == "exhibition":
        category_emoji = "üñºÔ∏è"
    elif category == "networking":
        category_emoji = "üëã"
    elif category == "boardgames":
        category_emoji = "üé≤"
    elif category == "other":
        category_emoji = "üîç"

    category_name = event.get("category_name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    event_type = f"{category_emoji} {category_name}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    links_info = ""
    tg_link = event.get("tg_link", "")
    tg_chat_link = event.get("tg_chat_link", "")

    if tg_link:
        links_info += f"\nüîó **–ö–∞–Ω–∞–ª:** {tg_link}"
    if tg_chat_link:
        links_info += f"\nüí¨ **–ß–∞—Ç:** {tg_chat_link}"

    caption = (
        f"üìå **{event['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {event['time']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
        f"üè∑Ô∏è **–¢–∏–ø:** {event_type}{links_info}"
    )

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@dp.callback_query(lambda c: c.data.startswith("my_event_"))
async def process_my_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[2])
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.edit_caption(
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        return

    event = events[event_idx]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º", callback_data="my_events")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    category = event.get("category", "unknown")
    category_emoji = ""
    if category == "party":
        category_emoji = "üéâ"
    elif category == "outdoor":
        category_emoji = "üå≥"
    elif category == "excursion":
        category_emoji = "üèõÔ∏è"
    elif category == "exhibition":
        category_emoji = "üñºÔ∏è"
    elif category == "networking":
        category_emoji = "üëã"
    elif category == "boardgames":
        category_emoji = "üé≤"
    elif category == "other":
        category_emoji = "üîç"

    category_name = event.get("category_name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    event_type = f"{category_emoji} {category_name}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    links_info = ""
    tg_link = event.get("tg_link", "")
    tg_chat_link = event.get("tg_chat_link", "")

    if tg_link:
        links_info += f"\nüîó **–ö–∞–Ω–∞–ª:** {tg_link}"
    if tg_chat_link:
        links_info += f"\nüí¨ **–ß–∞—Ç:** {tg_chat_link}"

    caption = (
        f"üìå **{event['name']}**\n\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {event['description']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {event['time']}\n"
        f"üìç **–ú–µ—Å—Ç–æ:** {event['location']}\n"
        f"üè∑Ô∏è **–¢–∏–ø:** {event_type}{links_info}"
    )

    try:
        await callback_query.message.edit_caption(
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=caption,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


@dp.callback_query(lambda c: c.data == "register_event")
async def process_register_event(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
    )
    await state.set_state(EventRegistrationStates.name)


@dp.message(EventRegistrationStates.name)
async def process_event_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.description)


@dp.message(EventRegistrationStates.description)
async def process_event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.location)


@dp.message(EventRegistrationStates.location)
async def process_event_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventRegistrationStates.time)


@dp.message(EventRegistrationStates.time)
async def process_event_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç):")
    await state.set_state(EventRegistrationStates.tg_link)


@dp.message(EventRegistrationStates.tg_link)
async def process_event_tg_link(message: types.Message, state: FSMContext):
    tg_link = message.text.strip()
    if tg_link.lower() == '–Ω–µ—Ç':
        tg_link = ""
    await state.update_data(tg_link=tg_link)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –±–µ—Å–µ–¥—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç):")
    await state.set_state(EventRegistrationStates.tg_chat_link)


@dp.message(EventRegistrationStates.tg_chat_link)
async def process_event_tg_chat_link(message: types.Message, state: FSMContext):
    tg_chat_link = message.text.strip()
    if tg_chat_link.lower() == '–Ω–µ—Ç':
        tg_chat_link = ""
    await state.update_data(tg_chat_link=tg_chat_link)

    # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤–∫–ª—é—á–∞—è "–î—Ä—É–≥–æ–µ"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéâ –¢—É—Å–æ–≤–∫–∏", callback_data="event_type_party")],
        [InlineKeyboardButton(text="üå≥ –í—ã–µ–∑–¥—ã –∑–∞–≥–æ—Ä–æ–¥", callback_data="event_type_outdoor")],
        [InlineKeyboardButton(text="üèõÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–∏", callback_data="event_type_excursion")],
        [InlineKeyboardButton(text="üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∏/–º—É–∑–µ–∏", callback_data="event_type_exhibition")],
        [InlineKeyboardButton(text="üëã –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="event_type_networking")],
        [InlineKeyboardButton(text="üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="event_type_boardgames")],
        [InlineKeyboardButton(text="üîç –î—Ä—É–≥–æ–µ", callback_data="event_type_other")]
    ])

    await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(EventRegistrationStates.category)


@dp.callback_query(lambda c: c.data.startswith("event_type_"))
async def process_event_type(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    event_type = callback_query.data.split("_")[2]
    user_id = str(callback_query.from_user.id)

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–î—Ä—É–≥–æ–µ"
    event_types = {
        "party": "–¢—É—Å–æ–≤–∫–∏",
        "outdoor": "–í—ã–µ–∑–¥—ã –∑–∞–≥–æ—Ä–æ–¥",
        "excursion": "–≠–∫—Å–∫—É—Ä—Å–∏–∏",
        "exhibition": "–í—ã—Å—Ç–∞–≤–∫–∏/–º—É–∑–µ–∏",
        "networking": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
        "boardgames": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
        "other": "–î—Ä—É–≥–æ–µ"
    }

    event_data = await state.get_data()
    event_data["category"] = event_type
    event_data["category_name"] = event_types[event_type]

    users = load_users()
    if user_id in users:
        event_data["creator_id"] = user_id
        event_data["creator_name"] = users[user_id]["name"]

    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    save_event(event_data)

    await callback_query.message.answer_photo(
        photo=FSInputFile(MENU_IMAGE_PATH),
        caption="‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!",
        reply_markup=get_main_menu(user_id)
    )

    await state.clear()


@dp.callback_query(lambda c: c.data.startswith("register_for_event_"))
async def register_for_event(callback_query: types.CallbackQuery):
    await callback_query.answer()
    event_idx = int(callback_query.data.split("_")[3])
    user_id = str(callback_query.from_user.id)
    events = load_events()

    if event_idx >= len(events):
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption="‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_main_menu(user_id)
        )
        return

    event = events[event_idx]

    success = register_user_for_event(user_id, event_idx)

    if success:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        links_text = ""
        tg_link = event.get("tg_link", "")
        tg_chat_link = event.get("tg_chat_link", "")

        if tg_link:
            links_text += f"\n\nüîó Telegram –∫–∞–Ω–∞–ª: {tg_link}"
        if tg_chat_link:
            links_text += f"\nüí¨ Telegram —á–∞—Ç: {tg_chat_link}"

        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{event['name']}\"!{links_text}",
            reply_markup=get_main_menu(user_id)
        )
    else:
        await callback_query.message.answer_photo(
            photo=FSInputFile(MENU_IMAGE_PATH),
            caption=f"‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            reply_markup=get_main_menu(user_id)
        )


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_caption(
        caption="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu(user_id)
    )


@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data == "back_to_events")
async def back_to_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data.startswith("category_"))
async def process_category_selection(callback_query: types.CallbackQuery):
    await callback_query.answer()
    category = callback_query.data.split("_")[1]

    category_names = {
        "party": "–¢—É—Å–æ–≤–∫–∏",
        "outdoor": "–í—ã–µ–∑–¥—ã –∑–∞–≥–æ—Ä–æ–¥",
        "excursion": "–≠–∫—Å–∫—É—Ä—Å–∏–∏",
        "exhibition": "–í—ã—Å—Ç–∞–≤–∫–∏/–º—É–∑–µ–∏",
        "networking": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
        "boardgames": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
        "other": "–î—Ä—É–≥–æ–µ"
    }

    category_emojis = {
        "party": "üéâ",
        "outdoor": "üå≥",
        "excursion": "üèõÔ∏è",
        "exhibition": "üñºÔ∏è",
        "networking": "üëã",
        "boardgames": "üé≤",
        "other": "üîç"
    }

    await callback_query.message.edit_caption(
        caption=f"{category_emojis.get(category, '')} –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category_names.get(category, category)}¬ª",
        reply_markup=get_events_list(category, 0)
    )


@dp.callback_query(lambda c: c.data == "view_events")
async def view_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_caption(
        caption="üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=get_event_categories()
    )


@dp.callback_query(lambda c: c.data == "my_events")
async def my_events(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = str(callback_query.from_user.id)
    await callback_query.message.edit_caption(
        caption="üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_my_events_list(user_id, 0)
    )


async def main():
    ensure_files_exist()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())